package net.praseodym.activelearner;

import java.util.Arrays;

/**
 * AFL native library stability test
 */
public class AFLStabilityTest {
    private static AFL afl;

    public static void main(String... args) throws Exception {
        afl = new AFL();
        AFL AFL = afl;
        AFL.hello();

        AFL.pre("test_afl_in", "test_afl_out", args[0]);

        byte[] input = ("9 5 6 4 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 6 1 8 4 4 6 1" +
                " 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4" +
                " 4 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6" +
                " 1 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4" +
                " 6 1 8 4 4 6 1 8 4 4 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4" +
                " 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1" +
                " 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4" +
                " 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4" +
                " 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6" +
                " 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 8 4 4 6 1 6 1" +
                " 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4" +
                " 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1" +
                " 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6" +
                " 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4" +
                " 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6" +
                " 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 8 4 4 6 1 6 1 8 4 4 6 1 6 1" +
                " 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1" +
                " 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6" +
                " 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4" +
                " 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4 6 1 8 4 4" +
                " 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 8 4 4 6 1 6 1 8" +
                " 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6" +
                " 1 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4" +
                " 4 6 1 6 1 8 4 4 6 1 6 1 6 1 6 1 8 4 4 6 1 6 1 8 4 4 8 4 4 6 1 6 1 8 4 4 6 1 6 1 8 4 4 6 1 8 4 4 6 1" +
                " 6 1 8 4 4 6 1 6 1 6 1 6 1").getBytes();

        byte[] output = afl.run(input);
        byte[] newOutput = new byte[0];

        for (int i = 0; i < 100000; i++) {
            newOutput = afl.run(input);
            if (!Arrays.equals(output, newOutput)) {
                System.err.println("Expected: [" + new String(output) + "]");
                System.err.println("Instead got: [" + new String(newOutput) + "]");
                throw new RuntimeException("Unexpected output");
            }
        }

        System.err.println("Output 1: [" + new String(output) + "]");
        System.err.println("Output 2: [" + new String(newOutput) + "]");

        AFL.post();
    }
}
